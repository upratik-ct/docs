import json
import os
from datetime import datetime
from typing import List

DATA_FILE = 'tasks.json'


class Task:
    def __init__(self, title: str, description: str = "", due_date: str = None):
        self.title = title
        self.description = description
        self.created_at = datetime.now().isoformat()
        self.completed = False
        self.due_date = due_date

    def mark_complete(self):
        self.completed = True

    def to_dict(self) -> dict:
        return {
            "title": self.title,
            "description": self.description,
            "created_at": self.created_at,
            "completed": self.completed,
            "due_date": self.due_date
        }

    @staticmethod
    def from_dict(data: dict):
        task = Task(data["title"], data.get("description", ""), data.get("due_date"))
        task.created_at = data["created_at"]
        task.completed = data["completed"]
        return task


class TaskManager:
    def __init__(self, data_file: str = DATA_FILE):
        self.data_file = data_file
        self.tasks: List[Task] = []
        self.load_tasks()

    def add_task(self, task: Task):
        self.tasks.append(task)
        self.save_tasks()

    def list_tasks(self, show_all: bool = True):
        print("\n📋 To-Do List:\n")
        for idx, task in enumerate(self.tasks):
            if not show_all and task.completed:
                continue
            status = "✅" if task.completed else "❌"
            print(f"{idx + 1}. {task.title} {status}")
            print(f"   Description: {task.description}")
            print(f"   Due: {task.due_date}")
            print(f"   Created at: {task.created_at}")
            print("")

    def complete_task(self, index: int):
        if 0 <= index < len(self.tasks):
            self.tasks[index].mark_complete()
            self.save_tasks()
        else:
            print("Invalid task number.")

    def delete_task(self, index: int):
        if 0 <= index < len(self.tasks):
            del self.tasks[index]
            self.save_tasks()
        else:
            print("Invalid task number.")

    def save_tasks(self):
        with open(self.data_file, "w") as f:
            json.dump([task.to_dict() for task in self.tasks], f, indent=4)

    def load_tasks(self):
        if os.path.exists(self.data_file):
            with open(self.data_file, "r") as f:
                data = json.load(f)
                self.tasks = [Task.from_dict(item) for item in data]
        else:
            self.tasks = []


def main_menu():
    manager = TaskManager()

    while True:
        print("\nChoose an option:")
        print("1. Add Task")
        print("2. List Tasks")
        print("3. Complete Task")
        print("4. Delete Task")
        print("5. Quit")

        choice = input("> ")

        if choice == "1":
            title = input("Task title: ")
            desc = input("Description: ")
            due = input("Due date (YYYY-MM-DD): ")
            task = Task(title, desc, due)
            manager.add_task(task)

        elif choice == "2":
            all_tasks = input("Show all tasks? (y/n): ").lower() == 'y'
            manager.list_tasks(show_all=all_tasks)

        elif choice == "3":
            try:
                idx = int(input("Enter task number to complete: ")) - 1
                manager.complete_task(idx)
            except ValueError:
                print("Please enter a valid number.")

        elif choice == "4":
            try:
                idx = int(input("Enter task number to delete: ")) - 1
                manager.delete_task(idx)
            except ValueError:
                print("Please enter a valid number.")

        elif choice == "5":
            break

        else:
            print("Invalid choice. Try again.")


if __name__ == "__main__":
    main_menu()
